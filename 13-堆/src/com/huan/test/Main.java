package com.huan.test;

import com.huan.heap.BinaryHeap;
import com.huan.printer.BinaryTrees;

public class Main {
    public static void main(String[] args) {
//        BinaryHeap<Integer> heap = new BinaryHeap<>();
//        heap.add(72);
//        heap.add(84);
//        heap.add(35);
//        heap.add(45);
//        heap.add(30);
//        heap.add(47);
//        heap.add(20);
//        heap.add(60);
//        heap.add(101);
//        heap.add(4);
//        BinaryTrees.println(heap);
//        heap.remove();
//        BinaryTrees.println(heap);
//        System.out.println(heap.replace(5));
//        BinaryTrees.println(heap);
//        test1();
        test2();
    }

    static void test1(){
        Integer[] nums = new Integer[]{
                35, 56, 53, 77, 64, 80, 65, 2, 6, 57, 1, 41, 73, 60, 26,
                90, 99, 40, 9, 52, 37, 33, 43, 75, 4, 74, 34, 71, 88, 79,
                27, 62, 51, 31, 14, 96, 86, 18, 68, 11, 46, 66, 7, 5, 49,
                28, 45, 39, 76, 42, 12, 24, 59, 8, 48, 85, 63, 23, 32, 58,
                87, 36, 72, 70, 3, 13, 10, 50, 78, 16, 82, 55, 15, 22, 100, 54
        };
        BinaryHeap<Integer> heap = new BinaryHeap<>(nums);
        BinaryTrees.println(heap);
    }

    /**
     * topK
     */
    static void test2(){
        int k = 10;
        Integer[] nums = new Integer[]{
                  373744, 175219, 523632, 145462, 134544, 587919, 851871, 995648, 960901, 957993, 752860, 17187, 390086, 728025, 736787, 696599, 477474, 162621, 7713, 73633, 922974, 472885, 732607, 293084, 808390, 357494, 914130, 308579, 305505, 767453, 857536, 334055, 383530, 562436, 733778, 657113, 676789, 512409, 923741, 517923, 347214, 966674, 577031, 756922, 550691, 985035, 639721, 618866, 572405, 466259, 568905, 947119, 994258, 419579, 305702, 207802, 440821, 568743, 127440, 641699, 594957, 552766, 392942, 635570, 162618, 284980, 94217, 102046, 611613, 445352, 362702, 125802, 145216, 452103, 877528, 122291, 691579, 793732, 951063, 724965, 560362, 143424, 802121, 186986, 663487, 609214, 327563, 309297, 864186, 268532, 623715, 457487, 928058, 621000, 634632, 34023, 204227, 457581, 973104, 967239, 434401, 340937, 973812, 391674, 195809, 108499, 816566, 422101, 680445, 930709, 498458, 889890, 219922, 587398, 449496, 809052, 986794, 581214, 291960, 425517, 336794, 547313, 4027, 614803, 593547, 164415, 708022, 549350, 422673, 73474, 446635, 212634, 121833, 624678, 32376, 942201, 720426, 391369, 267801, 352516, 283846, 815044, 137481, 751848, 395799, 605057, 550320, 430462, 317423, 711820, 267335, 482908, 680044, 357263, 918260, 545906, 104050, 374199, 141973, 922266, 551984, 757490, 895505, 543411, 43684, 318242, 568591, 524211, 77396, 645089, 721683, 443104, 810286, 602331, 345697, 900065, 304315, 651810, 638626, 393066, 71523, 610085, 436012, 916994, 123237, 166052, 788748, 623238, 853745, 671176, 560608, 563176, 203021, 503534, 513465, 607569, 603268, 712847, 970958, 612771, 683517, 636514, 907462, 865543, 812445, 903156, 731476, 916167, 686217, 603371, 491472, 910831, 298753, 194191, 141051, 575506, 799652, 492813, 989566, 22196, 229726
        };
        //小顶堆
        BinaryHeap<Integer> heap = new BinaryHeap<>((o1,o2) -> o2 - o1);
        for(int i = 0;i < nums.length;++i){
            if(i < k){
                heap.add(nums[i]);
            }else if(nums[i] > heap.get()){
                heap.replace(nums[i]);
            }
        }
        BinaryTrees.println(heap);
    }
}
